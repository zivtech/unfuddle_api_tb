<?php

// $Id$

/**
 * Implementation of hook_menu().
 */
function unfuddle_api_tb_menu() {
  $items['unfuddle_api_tb/js'] = array(
    'title' => 'Javascript Components Form',
    'page callback' => 'unfuddle_api_tb_tickets_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/unfuddle_api_tb'] = array(
    'title' => 'Unfuddle Time Block settings',
    'description' => 'Settings for Time Block.',
    'access arguments' => array('administer unfuddle api configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('unfuddle_api_tb_form'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Form for Local Database vs. API
 */
function unfuddle_api_tb_form() {
  $form['unfuddle_api_tb_location'] = array( 
    '#type' => 'radios',
    '#title' => t('Place to get our data from'),
    '#default_value' => variable_get('unfuddle_api_tb_location', 'api'),
    '#options' => array('local' => t('Local Database'), 'api' => t('Unfuddle API')),
    '#description' => t('If you want to switch you need to make a  selection and refresh the page. Would need to make a second AHAH callback to this is better than nothing.'),
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_block()
 */
function unfuddle_api_tb_block($op = 'list', $delta = '0', $edit = array()) {
  switch ($op) {
    case 'list':
      $item['unfuddle_api_tb_block'] = array(
        'info' => t('Unfuddle Time Entry Block'),
      );
      return($item);
    break;
    case 'view':
      if ($delta == 'unfuddle_api_tb_block' && user_access('administer unfuddle api configuration')) {
        $block = array(
          'subject' => t('Unfuddle Time Entry Block'),
          'content' => drupal_get_form('unfuddle_api_tb_entry_form'),
        );
      }
      return $block;
    break;
  }
}

/**
 * Time block entry form.
 */
function unfuddle_api_tb_entry_form($form_state) {
  $projects = array();
  $location = variable_get('unfuddle_api_tb_location', 'api');
  $projects = unfuddle_api_tb_projects($location);
  $project_id = isset($form_state['post']['projects']) ? $form_state['post']['projects'] : '';
  $form['local_api'] = array( 
    '#type' => 'item',
    '#description' => t('Currently getting data from %local. To change, click !here', array('%local' => $location, '!here' => l('here', 'admin/settings/unfuddle_api_tb'))),
  );
  $form['projects'] = array(
    '#title' => t('Projects'),
    '#type' => 'select',
    '#options' => $projects,
    '#ahah' => array(
      'path' => 'unfuddle_api_tb/js',
      'wrapper' => 'unfuddle_tickets',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  $form['unfuddle_tickets'] = array( 
    '#tree' => FALSE,
    '#weight' => 4,
    '#prefix' => '<div class="clear-block" id="unfuddle_tickets_wrapper">',
    '#suffix' => '</div>',
  );
  $form['unfuddle_tickets']['tickets'] = unfuddle_api_tb_tickets_form($project_id);
  $form['submit'] = array(
    '#type' => 'submit',
    '#weight' => 5,
    '#value' => t('Submit'),
  );
  return $form;
}

/**
 * Validate entries if not submitted through AHAH.
 */
function unfuddle_api_tb_entry_form_validate($form, &$form_state) {
  if ($form_state['clicked_button']['#executes_submit_callback']) {
    $ticket = $form_state['values']['ticket'];
    $time = $form_state['values']['time'];
    $desc = $form_state['values']['desc'];
    $date = $form_state['values']['date'];
    if (!date) {
      form_error($form, t('You must enter a date.'));
    }
    if (!$desc) {
      form_error($form, t('You must enter a description.'));
    }
    if (!$time || !is_numeric($time)) {
      form_error($form, t('You must enter a valid time.'));
    }
  }
}

/**
 * Submit entries if submit button is clicked.
 */
function unfuddle_api_tb_entry_form_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#executes_submit_callback']) {
    $ticket = $form_state['values']['ticket'];
    $time = $form_state['values']['time'];
    $desc = $form_state['values']['desc'];
    $date = $form_state['values']['date'];
    $project_id = $form_state['values']['projects'];
    $person_id = unfuddle_api_tb_get_person_id($project_id);
    // If the current user is not part of this project then say so. 
    if (!is_numeric($person_id)) {
      drupal_set_message($person_id);
    }
    else {
      $unfuddle = unfuddle_api_create();    
      $return = $unfuddle->createTimeEntry($project_id, $ticket, $time, $desc, $date, $person_id);
    }
    if (is_numeric($return)) {
      drupal_set_message(t('Time entry entered succesfully.'));
    }
    else {
      drupal_set_message(t('There was a problem with your time entry. Consult the stars'));
    }
  }
}

/**
 * Form for tickets.
 */
function unfuddle_api_tb_tickets_form($project_id = NULL) {
  $form = array(
    '#type' => 'item',
    '#prefix' => '<div id="unfuddle_tickets">',
    '#suffix' => '</div>',
  );
  if ($project_id) {
    $location = isset($form_state['post']['local_api']) ? $form_state['post']['local_api'] : variable_get('unfuddle_api_tb_location', 'api');
    $tickets = unfuddle_api_tb_tickets($project_id, $location);
    if ($tickets) {
      $form['ticket'] = array(
        '#title' => t('Tickets'),
        '#type' => 'select',
        '#options' => $tickets,
      );
      $form['time'] = array(
        '#title' => t('Time'),
        '#type' => 'textfield',
        '#size' => 5,
      );
      $form['desc'] = array(
        '#title' => t('Time Description'),
        '#type' => 'textfield',
        '#size' => 30,
      );
      $form['date'] = array(
        '#type' => 'date_popup',
        '#date_format' => 'm/d/Y',
      );
    }
    else {
      $form['null'] = array(
        '#title' => 'No active tickets for this project',
        '#theme' => 'unfuddle_api_tb_ticket_null',
      );
    }
  }
  return $form;
}

/**
 * Helper function to get a list of projects. 
 * @param string location
 *  can either be 'local' or the 'api'
 * 
 * $param string output
 *  default is an array()
 */
function unfuddle_api_tb_projects($location = 'api', $output = 'array') {
  $unfuddle = unfuddle_api_create();    
  $none = array('none' => '<none>');
  $list = array();
  switch ($location) {
    case 'api':
      $projects = $unfuddle->getProjects();
      foreach ($projects as $project) {
        if ($output = 'array' && !$project['archived']) {
          $list[$project['id']] = $project['title'];
        }
      }
      $list = $none + $list;
      return $list;
      break;
    case 'local':
      $result = db_query("SELECT title, id, archived from {unfuddle_api_import_projects} ORDER BY title ASC");
      while ($project = db_fetch_array($result)) {
        if ($output = 'array' && !$project['archived']) {
          $list[$project['id']] = $project['title'];
        }
      }
      $list = $none + $list;
      return $list;
      break;
  }
}

/**
 * Helper function to get a list of projects. 
 * @param string location
 *  can either be 'local' or the 'api'
 * 
 * @param string output
 *  default is an array()
 */
function unfuddle_api_tb_tickets($project_id, $location = 'api', $output = 'array') {
  switch ($location) {
    case 'api':
      $unfuddle = unfuddle_api_create();    
      $tickets = $unfuddle->getTickets($project_id);
      if ($output = 'array' && $tickets) {
        foreach ($tickets as $ticket) {
          if ($ticket['resolution'] != 'fixed') { 
            $list[$ticket['id']] = $ticket['summary'];
          }
        }
      }
      return $list;
      break;
    case 'local':
      $result = db_query("SELECT summary, id, resolution from {unfuddle_api_import_tickets} where project_id = '%d' ORDER BY summary ASC", $project_id);
      if ($output = 'array') {
        while ($ticket = db_fetch_array($result)) {
          if ($ticket['resolution'] != 'fixed') { 
            $list[$ticket['id']] = $ticket['summary'];
          }
        }
      }
      return $list;
      break;
  }
}
/**
 * Helper function to retrieve the current person_id.
 * @param integer project_id
 *
 * Return
 *   person_id if the current user is part of the project
 */
function unfuddle_api_tb_get_person_id($project_id) {
  $username = variable_get('unfuddle_api_user', '');
  $unfuddle = unfuddle_api_create();    
  $people = $unfuddle->getProjectPeople($project_id); 
  foreach ($people as $person) {
    if ($person['username'] == $username) {
      return $person['id'];
    }
  }
  return t('This person is not a  part of this project.'); 
}

/**
 * Menu callback for AHAH additions.
 */
function unfuddle_api_tb_tickets_js() {
  include_once 'modules/node/node.pages.inc';
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  // Get the form from the cache.
  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  // We will run some of the submit handlers so we need to disable redirecting.
  $form['#redirect'] = FALSE;
  // We need to process the form, prepare for that by setting a few internals
  // variables.
  $form['#post'] = $_POST;
  $form['#programmed'] = FALSE;
  $form_state['post'] = $_POST;
  $form_state['submitted'] = TRUE;
 
  // Build, validate and if possible, submit the form.
  drupal_process_form($form_id, $form, $form_state);
  // This call recreates the form relying solely on the form_state that the
  // drupal_process_form set up.
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);

  // Render the new output.
  $choice_form = $form['unfuddle_tickets']['tickets'];

  $output = theme('status_messages') . drupal_render($choice_form);
  // Added so AHAH works with date picker. 
  $output .= drupal_get_js();
  drupal_json(array('status' => TRUE, 'data' => $output));
}

/**
 * Implementation of hook_theme().
 */ 
function unfuddle_api_tb_theme() {
  return array(
    'unfuddle_api_tb_ticket_null' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Theme for ticekts.
 */
function theme_unfuddle_api_tb_ticket_null($form) {
  return t('There are no active tickets for this project.');
}
